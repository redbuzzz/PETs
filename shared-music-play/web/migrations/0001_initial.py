# Generated by Django 4.1.4 on 2023-05-13 12:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import web.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "role",
                    models.CharField(
                        choices=[("admin", "Администратор"), ("staff", "Сотрудник"), ("user", "Пользователь")],
                        default="user",
                        max_length=15,
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            managers=[
                ("objects", web.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="BannedUserRoom",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("banned_at", models.DateTimeField(auto_now_add=True)),
                ("banned_until", models.DateTimeField(auto_now=True, null=True)),
                (
                    "ban_type",
                    models.CharField(choices=[("room", "Бан в комнате"), ("chat", "Бан в чате")], max_length=15),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Room",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "privacy",
                    models.CharField(
                        choices=[("private", "Приватная"), ("public", "Публичная")], default="private", max_length=15
                    ),
                ),
                ("code", models.CharField(blank=True, max_length=5, null=True, unique=True)),
                (
                    "banned_users",
                    models.ManyToManyField(
                        related_name="banned_users", through="web.BannedUserRoom", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserRoom",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "room_role",
                    models.CharField(
                        choices=[("admin", "Администратор"), ("moderator", "Модератор"), ("user", "Пользователь")],
                        default="user",
                        max_length=15,
                    ),
                ),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("room", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="web.room")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="TrackHistory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("link", models.CharField(blank=True, max_length=255, null=True)),
                ("listened_at", models.DateTimeField(auto_now_add=True)),
                ("title", models.CharField(max_length=255)),
                ("room", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="web.room")),
            ],
        ),
        migrations.AddField(
            model_name="room",
            name="users",
            field=models.ManyToManyField(related_name="users", through="web.UserRoom", to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name="PlaylistTrack",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=255)),
                ("link", models.CharField(max_length=255)),
                ("thumbnail_url", models.CharField(max_length=255)),
                ("order_num", models.IntegerField()),
                ("room", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="web.room")),
            ],
            options={
                "ordering": ["order_num"],
            },
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("text", models.TextField()),
                ("room", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="web.room")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FavoriteSong",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("link", models.CharField(blank=True, max_length=255, null=True)),
                ("added_at", models.DateTimeField(auto_now_add=True)),
                ("title", models.CharField(max_length=255)),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name="banneduserroom",
            name="room",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="web.room"),
        ),
        migrations.AddField(
            model_name="banneduserroom",
            name="user",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
